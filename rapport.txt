Inledning 

Uppgiften bygger på att förstå och komplettera befintlig kod för att den skall fungera som önskat i webbläsaren. 
Jag börjar med att kolla igenom koden, se vilka delar som redan finns, vilka kopplingar de har till html och 
vilka funktioner som behöver kompletteras. 

Del 1: Skapa HTML-element 

Första funktionen som behöver kompletteras är en funktion som tar in två argument: title och description, och skall av 
dessa skapa ett element i js. Uppbyggnaden av elementet är en <li> i grunden med en <article> i. 
I <article> finns två element, en <header> och en <div>. Elementen skall ha bestämda klasser och variabler som textinnehåll. 
Jag skapar mina olika element genom att göra variabler med const och sedan använda createElement metoden på dem.

Jag skapar först grundelementet, en li. Denna skall inte ha någon klass och endast innehålla andra element. 
Därefter skapar jag det article-element som skall vara i listan, och tilldelar det en klass mha className metoden. 
Sedan skapar jag en header, tilldelar den två klasser och sätter dess textinnehåll (mha. innerText) till det första 
argumentet för funktionen dvs title. 
Sista elementet är en div, jag skapar den likt headern men sätter innehållet till det andra argumentet istället, description. 

När jag har alla mina element klara skall jag bara sätta ihop dem. Article skall innehålla headern och diven. 
Jag anväder mig av metoden appendChild och stoppar in headern och diven som barn till article. 
Jag gör likadant med article som barn till li. 
Nu är hela elementet med alla barn klart och jag returnerar det. 


Del 2: Genomsökning av array

Andra delen är att komplettera funktionen som skall söka igenom vår array efter matchningar på det som är inskrivet i sökfältet. 
Jag vill jämföra sökningen med både titel och description och sedan returnera en ny array med de resultaten. 

Jag skapar en ny variabel för sökningsresultaten och använder den inbyggda filter metoden på den ursprungliga arrayen. 
Jag gör två villkor på filtret och använder operatorn eller || för att det ska fungera både med description och title. 
Sedan använder jag den inbyggda metoden includes för att kolla om de innehåller det jag skriver i sökfältet. 

För att undvika skiftlägeskänsligheten så converterar jag både sökningsinputen och det som skall sökas igenom till stora bokstäver mha
den inbyggda toUpperCase metoden. 

Slutligen returnerar jag den nya filtrerade arrayen. 


Del 3: Debugging

När jag stött på problem så har jag dels använt mig av console.log() funktionen för att se olika element i consolen. 
Jag har också använt det inbyggda debuggingverktyget i webbläsaren. Det gör jag i inspekt verktyget och fliken sources genom 
att sätta breakpoints i koden och följa vad som händer när jag använder sidan. 
Det går även att sätta breakpoints i koden i visual studio men det har jag inte gjort i detta fallet. 


Slutsats: 

Mycket av koden fanns redan på plats så uppgiften var att förstå tillgänglig kod och vad jag behövde få ut av de 
funktioner som inte var färdigskrivna, sedan skriva klart dem. 






